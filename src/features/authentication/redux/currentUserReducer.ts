import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { authRepository, User } from '@data';
import { AppDispatch } from '@redux';

interface CurrentUserState {
    user: User | null;
}

const initialState: CurrentUserState = {
    user: null,
};

// Thunk for setting up the authentication state listener
const initializeAuthListener = createAsyncThunk<void, void, { dispatch: AppDispatch }>(
    'auth/initializeAuthListener',
    async (_, { dispatch }) => {
        try {
            // Firebase listener to monitor authentication state changes
            authRepository.onAuthStateChanged((user) => {
                // Dispatch action to set the current user in Redux state
                if (user) {
                    dispatch(setCurrentUser({ uid: user.uid, email: user.email }));
                } else {
                    dispatch(clearUser()); // No user logged in
                }
            });
        } catch (error) {
            console.error('Error initializing Firebase auth listener', error);
        }
    }
);

// Slice for handling current user
const currentUserSlice = createSlice({
    name: 'currentUser',
    initialState,
    reducers: {
        setCurrentUser: (state, action: PayloadAction<User | null>) => {
            state.user = action.payload;
        },
        clearUser: (state) => {
            state.user = null;
        },
    },
});

// Extract the action creators generated by `createSlice`
const { setCurrentUser, clearUser } = currentUserSlice.actions;

const currentUserReducer = currentUserSlice.reducer;

export { currentUserReducer, initializeAuthListener, setCurrentUser, clearUser };